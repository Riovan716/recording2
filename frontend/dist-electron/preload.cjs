"use strict";const r=require("electron");try{let n=function(){return console.log("[preload] Test function called - preload is working!"),"Preload test successful"};console.log("[preload] loaded");const o=Object.freeze({isElectron:!0,testPreload:n,getAppVersion:()=>r.ipcRenderer.invoke("get-app-version"),getAppPath:()=>r.ipcRenderer.invoke("get-app-path"),getScreenSources:()=>r.ipcRenderer.invoke("get-screen-sources"),onMenuNewRecording:e=>{r.ipcRenderer.on("menu-new-recording",e)},onMenuOpenRecording:e=>{r.ipcRenderer.on("menu-open-recording",e)},removeAllListeners:e=>{r.ipcRenderer.removeAllListeners(e)},getBackendStatus:()=>r.ipcRenderer.invoke("get-backend-status"),openPreviewWindow:e=>r.ipcRenderer.invoke("open-preview-window",e)});console.log("[preload] Exposing electronAPI:",o),r.contextBridge.exposeInMainWorld("electronAPI",o),console.log("[preload] electronAPI exposed successfully"),r.contextBridge.exposeInMainWorld("ipc",Object.freeze({on:(...e)=>r.ipcRenderer.on(...e),off:(...e)=>r.ipcRenderer.off(...e),send:(...e)=>r.ipcRenderer.send(...e),invoke:(...e)=>r.ipcRenderer.invoke(...e)})),globalThis.__PRELOAD_OK__=!0,r.contextBridge.exposeInMainWorld("__PRELOAD_OK__",!0),console.log("[preload] APIs exposed: window.electronAPI, window.ipc, window.__PRELOAD_OK__")}catch(n){try{require("electron").ipcRenderer?.send("preload-crashed",String(n))}catch{}console.error("[preload] FAILED:",n)}
